import uuid
from qdrant_client import QdrantClient
from qdrant_client.models import VectorParams, Distance, PointStruct, NamedVectorStruct
from sentence_transformers import SentenceTransformer
from services.image_utils import get_image_vector_from_url

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = QdrantClient(host="localhost", port=6333)

# –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å (SentenceTransformer)
text_model = SentenceTransformer("all-MiniLM-L6-v2")

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
TEXT_COLLECTION = "products"
IMAGE_COLLECTION = "products_image"

# üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
def init_qdrant_collection():
    client.recreate_collection(
        collection_name=TEXT_COLLECTION,
        vectors_config=VectorParams(size=384, distance=Distance.COSINE),
    )

# üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è image-–≤–µ–∫—Ç–æ—Ä–æ–≤ —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º –≤–µ–∫—Ç–æ—Ä–æ–º
def init_image_collection():
    client.recreate_collection(
        collection_name=IMAGE_COLLECTION,
        vectors_config={
            "image": VectorParams(size=2048, distance=Distance.COSINE)
        },
    )

# üßπ –û—á–∏—Å—Ç–∫–∞ payload –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ Qdrant
def clean_payload(product: dict) -> dict:
    return {
        k: str(v) if isinstance(v, uuid.UUID) else v
        for k, v in product.items()
        if v is not None and isinstance(v, (str, int, float, bool))
    }

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
def add_products_to_qdrant(products: list):
    texts = [p["title"] + " " + (p["description"] or "") for p in products]
    vectors = text_model.encode(texts).tolist()
    points = [
        PointStruct(id=str(p["id"]), vector=vector, payload=clean_payload(p))
        for p, vector in zip(products, vectors)
    ]
    client.upsert(collection_name=TEXT_COLLECTION, points=points)

# üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
def search_similar_products(query: str, top_k: int = 5):
    vector = text_model.encode(query).tolist()
    results = client.search(collection_name=TEXT_COLLECTION, query_vector=vector, limit=top_k)
    return [{"score": r.score, **r.payload} for r in results]

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ image-–≤–µ–∫—Ç–æ—Ä–æ–≤
def add_products_with_image_vectors(products: list):
    points = []
    for product in products:
        vector = get_image_vector_from_url(product["main_photo_url"])
        if vector:
            print("‚úîÔ∏è –í–µ–∫—Ç–æ—Ä:", len(vector))
            point = PointStruct(
                id=str(product["id"]),
                vector={"image": vector},  # ‚úÖ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                payload=clean_payload(product),
            )
            points.append(point)

    print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º", len(points), "–≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ Qdrant...")
    client.upsert(collection_name=IMAGE_COLLECTION, points=points)

def search_similar_images(image_url: str, top_k: int = 5):
    from services.image_utils import get_image_vector_from_url

    vector = get_image_vector_from_url(image_url)
    if vector is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    results = client.search(
        collection_name=IMAGE_COLLECTION,
        query_vector={"name": "image", "vector": vector},  # üõ†Ô∏è —Ñ–∏–∫—Å
        limit=top_k,
    )
    return [{"score": r.score, **r.payload} for r in results]

